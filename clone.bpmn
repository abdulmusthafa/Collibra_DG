<?xml version="1.0" encoding="UTF-8"?>
<definitions xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:activiti="http://activiti.org/bpmn" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:omgdc="http://www.omg.org/spec/DD/20100524/DC" xmlns:omgdi="http://www.omg.org/spec/DD/20100524/DI" typeLanguage="http://www.w3.org/2001/XMLSchema" expressionLanguage="http://www.w3.org/1999/XPath" targetNamespace="http://www.activiti.org/test">
  <collaboration id="Collaboration">
    <participant id="clone_asset" name="Clone" processRef="process_clone_asset"></participant>
  </collaboration>
  <process id="process_clone_asset" name="Clone Asset" isExecutable="true">
    <documentation>This workflow will clone current business item to a target domain or with a new name in the current domain</documentation>
    <laneSet id="laneSet_process_clone_asset">
      <lane id="lane1">
        <flowNodeRef>startevent1</flowNodeRef>
        <flowNodeRef>endevent1</flowNodeRef>
        <flowNodeRef>clone_script</flowNodeRef>
        <flowNodeRef>scripttask1</flowNodeRef>
      </lane>
    </laneSet>
    <startEvent id="startevent1" name="Start" activiti:initiator="startUser"></startEvent>
    <scriptTask id="clone_script" name="Clone" scriptFormat="groovy" activiti:autoStoreVariables="false">
      <script>loggerComponent.info("LOG: Start cloning asset \"" + item.name + "\"...")

//Copy Attributes
attributeTypeComponent.getAttributeTypes().each {
	AttrLabel = it.getId()
	AttrName = it.getName()
	AttrType = it.getAttributeKind()	
	attributeComponent.getAttributesOfTypeForRepresentation(item.id, AttrLabel).each {
		loggerComponent.info("AttrLabel:"+ AttrLabel + ", Attribute Type: " + AttrType + ", Name: " + AttrName)
		switch (AttrType) {
		case 'MULTI_VALUE_LIST':
			loggerComponent.info(" Multi Value: " + it + ", Label-getType: " + it.getType().getId() + ", AttrLabel: " + AttrLabel + ", Values: " + it.getValues())
			cloneAttribute = attributeComponent.addMultiValueListAttribute(newTermId, AttrLabel, it.getValues()) //attributeMultiListValue)
			break
		default:
			List valuelist= [it.getStringValue()].flatten().findAll{ it != null }
			loggerComponent.info(" Other Value: " + valuelist)
			attributeComponent.addAttribute(newTermId,AttrLabel,valuelist) //add attribute to newly created term
			break
		}
	}

}

//Copy Relations
//Get Complex Relations to exclude from relation build
def crList=[]
complexRelationComponent.getComplexRelations(item.id).each {
crList.add(it.getId())
}

//Get Relations
relationTypeComponent.getAllRelationTypes().each {
	def relType = it.getId()
	relationComponent.findRelationsByType(relType,0,0).each {
		//loggerComponent.info("Rel ID: " + it.getSource().getId())
		def x = it.getSource().getId()
		if ( !crList.contains(x)) {
			if(it.getTarget().getId() == item.id ) {
				loggerComponent.info("Relations: " + it  + ", Target: " + it.getTarget() )
				relationComponent.addRelation(it.getSource().getId(), relType, newTermId,null,null)
			} else if (it.getSource().getId() == item.id ) {
				loggerComponent.info("Relations: " + it  + ", Source: " + it.getSource())
				relationComponent.addRelation(newTermId, relType, it.getTarget().getId(),null,null)
			}
		}
	}
}

//Copy Complex Relation types
complexRelationTypeComponent.getAllComplexRelationTypes().each {
	def crTypeId=it.getId()
	def crMap=[:]
	def attrMap=[:]
	//loggerComponent.info("CR Type: " + it)
	complexRelationComponent.getComplexRelations(item.id,it.getId()).each {
		loggerComponent.info("CR: " + it)
		it.getLegs().each {
			loggerComponent.info("CR Relations: " + it.getType().getTarget().getSignifier() + ", Target:" + it.getTargetId())
			def mapAsset = it.getTargetId()
			if ( mapAsset == item.id) {
				mapAsset = newTermId
			}
			crMap&lt;&lt;[(it.getRelationTypeId()):[mapAsset]]
		}
		
		//Get Attributes of CR
		it.getAttributes().each {
			loggerComponent.info("CR Attributes: " + it + ", Type Label: " + it.getType().getId() + ", Kind: " + it.getType().getAttributeKind())
			crAttrType = it.getType().getAttributeKind()
			crAttrLabel = it.getType().getId()
			List valuelist1 = [it.getValues()] //for multi valuelist
			List valuelist2= [it.getStringValue()].flatten().findAll{ it != null } //for all other values
			switch (crAttrType) {
			case 'MULTI_VALUE_LIST':
				//loggerComponent.info(" Multi Value: " + it + ", Label-getType: " + it.getType().getId() + ", AttrLabel: " + AttrLabel + ", Values: " + it.getValues())
				attrMap&lt;&lt;[(crAttrLabel):valuelist1]
				break
			default:
				//List valuelist= [it.getStringValue()].flatten().findAll{ it != null }
				//loggerComponent.info(" Other Value: " + valuelist)
				attrMap&lt;&lt;[(crAttrLabel):valuelist2]
				break
			}
		}
	
		//crMap.each { loggerComponent.info("CR Rel Map: " + it) }
		//attrMap.each { loggerComponent.info("CR Attr Map: " + it) }
		complexRelationComponent.addComplexRelation(crTypeId,crMap,attrMap);	
	}
}


loggerComponent.info("LOG: Item Cloned")
</script>
    </scriptTask>
    <endEvent id="endevent1" name="End"></endEvent>
    <sequenceFlow id="flow2" sourceRef="clone_script" targetRef="endevent1"></sequenceFlow>
    <scriptTask id="scripttask1" name="Create Term" scriptFormat="groovy" activiti:autoStoreVariables="false">
      <extensionElements>
        <activiti:executionListener event="end" class="com.collibra.dgc.core.workflow.activiti.executionlistener.FlushExecutionListener"></activiti:executionListener>
      </extensionElements>
      <script>def newTermName = item.name + "_New"
def conceptTypeId
conceptTypeComponent.findConceptTypesContainingSignifier(item.getConceptTypeName(),0,0).each { 
	conceptTypeId=it.getId()
}
def targetDomain = item.getVocabulary()

newTermId = termComponent.addTerm(targetDomain, newTermName, conceptTypeId).getId()

execution.setVariable("newTermId",newTermId)</script>
    </scriptTask>
    <sequenceFlow id="flow3" sourceRef="scripttask1" targetRef="clone_script"></sequenceFlow>
    <sequenceFlow id="flow4" sourceRef="startevent1" targetRef="scripttask1"></sequenceFlow>
  </process>
  <bpmndi:BPMNDiagram id="BPMNDiagram_Collaboration">
    <bpmndi:BPMNPlane bpmnElement="Collaboration" id="BPMNPlane_Collaboration">
      <bpmndi:BPMNShape bpmnElement="clone_asset" id="BPMNShape_clone_asset">
        <omgdc:Bounds height="351.0" width="911.0" x="30.0" y="30.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="lane1" id="BPMNShape_lane1">
        <omgdc:Bounds height="351.0" width="891.0" x="50.0" y="30.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="startevent1" id="BPMNShape_startevent1">
        <omgdc:Bounds height="35.0" width="35.0" x="90.0" y="180.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="clone_script" id="BPMNShape_clone_script">
        <omgdc:Bounds height="55.0" width="105.0" x="430.0" y="170.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="endevent1" id="BPMNShape_endevent1">
        <omgdc:Bounds height="35.0" width="35.0" x="650.0" y="180.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="scripttask1" id="BPMNShape_scripttask1">
        <omgdc:Bounds height="55.0" width="105.0" x="240.0" y="170.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge bpmnElement="flow2" id="BPMNEdge_flow2">
        <omgdi:waypoint x="535.0" y="197.0"></omgdi:waypoint>
        <omgdi:waypoint x="650.0" y="197.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow3" id="BPMNEdge_flow3">
        <omgdi:waypoint x="345.0" y="197.0"></omgdi:waypoint>
        <omgdi:waypoint x="430.0" y="197.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow4" id="BPMNEdge_flow4">
        <omgdi:waypoint x="125.0" y="197.0"></omgdi:waypoint>
        <omgdi:waypoint x="240.0" y="197.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</definitions>